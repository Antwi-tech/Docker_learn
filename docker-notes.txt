Metrix from hell

Docker uses lxc containers
The OS Kernel is responsible for interacting with the hardware but the software makes the OS different

Docker Image
It is a package or template that is used to create containers

Docker Container
They are running instances of images

- SOME DOCKER Commands

docker run container-name
docker run container_name:version - This specifies the version of the image to pull which is called a tag
docker ps - list containers present
docker ps -a - show all runing containers
docker stop container_name/container_id
docker rm - remove a container
docker rmi- remove an image
docker images- to view images present
docker exec - to execute a command in a container
docker pull - to pull an image from docker without running it
docker run -it image_name bash - automatically log into the container and be in bash
docker run -d image_name sleep 20 - Sleep for 20 seconds
docker run --name webapp -d nginx:1.14-alpine - use to do this Run a container with the nginx:1.14-alpine
 image and name it webapp
docker run -d - Run in detahed mode
docker attach  container_id - Run and see how the container is running q

-HOW TO RUN STDIN(standard input)

By default docker runs in a non-interactive mode to make it intractive to take input from user, we specify -i 
using docker run, - docker run -i image_name

to also make a prompt show , specify the -t create a pseudo terminal
: docker run -it image_name 

- RUN - PORT MAPPING
To make the application accessible outside the container, we use 
docker run -p 5000:5000 image_name
the first number allows the user to specify multiple instances so the user can go to 192.168.1.5:port_instance_specified


- HOW DATA IS PERISTED (Volume Mapping)
docker run -v dir_to_map_to:dir/db_dir db_name
This command, sves the data or backup the data in the container/ stores it in the dorectory you specified to 
keep safe 

To see additional info about a container- docker inspect container_name / id 
To view logs of a container - docker logs container_id

COMMANDS TO CREATE AN IMAGE AND PUSH TO DOCKER HUB
Dockerfile- It is a file written in a pecific format that docker can understand. It comprises of instrutions and
argument 
docker build Dockerfile -t image_name
docker push name_of_image

To tag an image after building - docker build . -t tag_name

TO check OS Information
Pull and run the image with -it
cat /etc/os-release or lsb_release -a
or 
docker image inspect python:3.6

in docker bash, use vi Dockerfile to format a dockerfile


ENVIRONMENT VARIABLE IN DOCKER
- use env vairble in the app code after setting it in thecode, you can use it in the docker code
color = os.environ.get('APP-COLOR')
 
DOCKER code
docker run -e env_name
 image_name 
docker run -e APP_COLOR=blue image_name 


Another way to use env variables

CMD, ARGUMENTS AND ENTRYPOINTS
CMD- passed default value if the vlaue was not specified during run time
argument- processes to execute
entrypoint- your start command 

DOCKER COMPOSE
Confugurations In yaml file

Instead of running multiple instaces of different ctianers, a docker-compose.yml file is used to specify 
differnt iamges for use. Changes are easily integrated witht the yml file

--links is used to link 2 contianers together

docekr-compose.yml is in the form of a json, dic or array . 

yml
1. version this specifies the version od docker compose you want to use
2 services:  this is where all the docker images go and the network it mateches to
3. networks this is where the application is divided maybe into backend and frentend

DOCKER ENGINE
HOW DOCKER RUNS APPLICATION IN ISOLATED CONTAINERS
engine- a host with docker installed on it
When you install eninge you install:
1. Docker deamon- Handles docker objects
2. REST API- The server to the deamon
3. Docker CLI

docker -H=remote-docker-engine:portnum run img

cgroups is used to specify the hardware resources a contianer shoult utilise
cpu
cmd: docker run --cpus=.5  ubuntu
memory
cmd: docker run --memory=100m ubuntu

DOCKER STORAGE
The dockerfile is an example of a layered architecture, each line in the Dockerfile creates a new layer or 
adds to the existing layer

match a Volume/db to a folder to preserve or persist data
cmd: docker voulume create data_volume - creating a dir in docker contianer
cmd: docker run -v data_volume:/var/lib/mysql mysql - matching your data to the storage you created 

Types of Mounting data
Volunme mount and Binding Mount

STORAGE DRIVERS
1. AUFS         4.Device mapper
2. ZFS          5. Overlay
3. BTRFS        6. Overlay2

SOME CMD
docker run --name=mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 -d  mysql    
docker exec mysql-db mysql -pdb_pass123 -e 'use foo; select * from myTable'
docker run -v /opt/data:/var/lib/mysql --name=mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 -d  mysql

SOME COMMANDS TO TAG A CONTAINER, TO USE A PRIVATE CONTINAER    
cmd: docker tag spam:v1 docker.mycompany.com/spam:v1
cmd: docker push docker.mycompany.com/spam:v1
cmd:docker pull docker.mycompany.com/spam_alice:v3
cmd: docker save -o spam_updated.tar spam:v2
cmd: docker load -i spam_bob.tar
cmd: docker build .docker build --build-arg WELCOME_TEST="Welcome!" .
cmd: docker run --env NAME="Antwiwaa" hello_image
cmd: docker build -t my_image .
cmd: docker logs -f id - check logs of a contianer
cmd: docker container prune - to remove all containers
cmd: docker ps -f "name=contianer_name" - filtering running container 
$ touch Dockefile
$ nano Dockerfile
$ echo "RUN apt-get update" >> Dockerfile
$ cat Dockerfile
FROM ubuntu
RUN apt-get update
$

echo -e "RUN curl https://assets.datacamp.com/production/repositories/6082/datasets/31a5052c6a5424cbb8d939a7a6eff9311957e7d0/pipeline_final.zip -o /pipeline_final.zip\nRUN unzip /pipeline_final.zip\n
RUN rm /pipeline_final.zip" >> Dockerfile

DOCKERFILE INSTRUCTIONS
FROM, RUN, COPY, WORKDIR, ARG var_name=var_value, ENV var_name=var_value CMD, ENTRYPOINT

ARG - Used to change sth within the docker file at build time
ENV - Used to change things outside the dockerfile at run time

What does "reproducibility" mean when we are talking about containers?
ans: Their output remains the same across time

Docker Engine API's define interactions between clients and daemon

NETWORKS CREATED WHEN DOCKER IS installed
Bridge- Private internal network created by docker on the host. Default internal IP is 172.17.0.2
cmd: docker run ubuntu
None- Doesn't associate with any network 
cmd: docker run ubuntu --network=none
host- THis is when the imae takes up the port of the hosr
cmd: docker run ubuntu --network=host

TO CREATE ISOLATED DOCKER NETWORLS
cmd: docker network create \
--driver bridge \
--subnet 182.18.0.0 \
custom-isolated-network

docker network ls
docker inspect id

To connect a webserver to a db
cmd: mysql.connect(img_name)

QUESTION
Deploy a web application named webapp using the kodekloud/simple-webapp-mysql image. Expose the port to 38080 on the host.

The application makes use of two environment variable:
1: DB_Host with the value mysql-db.
2: DB_Password with the value db_pass123.
Make sure to attach it to the newly created network called wp-mysql-network.


Also make sure to link the MySQL and the webapp container.

cmd: docker run --network=wp-mysql-network \
-e DB_Host=mysql-db -e DB_Password=db_pass123 \
-p 38080:8080 --name webapp --link mysql-db:mysql-db \
-d kodekloud/simple-webapp-mysql


Let practice deploying a registry server on our own.
Run a registry server with name equals to my-registry using registry:2 image with host port set to 5000, 
and restart policy set to always.Note: Registry server is exposed on port 5000 in the image.

cmd: docker run -d --name my-reistry -p 5000:500 --restart=always registry:2