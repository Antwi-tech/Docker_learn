Metrix from hell

Docker uses lxc containers
The OS Kernel is responsible for interacting with the hardware but the software makes the OS different

Docker Image
It is a package or template that is used to create containers

Docker Container
They are running instances of images

- SOME DOCKER Commands

docker run container-name
docker run container_name:version - This specifies the version of the image to pull which is called a tag
docker ps - list containers present
docker ps -a - show all runing containers
docker stop container_name/container_id
docker rm - remove a container
docker rmi- remove an image
docker images- to view images present
docker exec - to execute a command in a container
docker pull - to pull an image from docker without running it
docker run -it image_name bash - automatically log into the container and be in bash
docker run -d image_name sleep 20 - Sleep for 20 seconds
docker run --name webapp -d nginx:1.14-alpine - use to do this Run a container with the nginx:1.14-alpine
 image and name it webapp
docker run -d - Run in detahed mode
docker attach  container_id - Run and see how the container is running q

-HOW TO RUN STDIN(standard input)

By default docker runs in a non-interactive mode to make it intractive to take input from user, we specify -i 
using docker run, - docker run -i image_name

to also make a prompt show , specify the -t create a pseudo terminal
: docker run -it image_name 

- RUN - PORT MAPPING
To make the application accessible outside the container, we use 
docker run -p 5000:5000 image_name
the first number allows the user to specify multiple instances so the user can go to 192.168.1.5:port_instance_specified


- HOW DATA IS PERISTED (Volume Mapping)
docker run -v dir_to_map_to:dir/db_dir db_name
This command, sves the data or backup the data in the container/ stores it in the dorectory you specified to 
keep safe 

To see additional info about a container- docker inspect container_name / id 
To view logs of a container - docker logs container_id

COMMANDS TO CREATE AN IMAGE AND PUSH TO DOCKER HUB
Dockerfile- It is a file written in a pecific format that docker can understand. It comprises of instrutions and
argument 
docker build Dockerfile -t image_name
docker push name_of_image

To tag an image after building - docker build . -t tag_name

TO check OS Information
Pull and run the image with -it
cat /etc/os-release or lsb_release -a
or 
docker image inspect python:3.6

in docker bash, use vi Dockerfile to format a dockerfile


ENVIRONMENT VARIABLE IN DOCKER
- use env vairble in the app code after setting it in thecode, you can use it in the docker code
color = os.environ.get('APP-COLOR')
 
DOCKER code
docker run -e env_name
 image_name 
docker run -e APP_COLOR=blue image_name 


Another way to use env variables

CMD, ARGUMENTS AND ENTRYPOINTS
CMD- passed default value if the vlaue was not specified during run time
argument- processes to execute
entrypoint- your start command 

DOCKER COMPOSE
Confugurations In yaml file

Instead of running multiple instaces of different ctianers, a docker-compose.yml file is used to specify 
differnt iamges for use. Changes are easily integrated witht the yml file

--links is used to link 2 contianers together

docekr-compose.yml is in the form of a json, dic or array . 

yml
1. version this specifies the version od docker compose you want to use
2 services:  this is where all the docker images go and the network it mateches to
3. networks this is where the application is divided maybe into backend and frentend

